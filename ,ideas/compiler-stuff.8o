:macro stack-pointer {
  :byte { ( HERE + 2 ) >> 8 }
  :byte { ( HERE + 1 ) }
}

: main
  set-monitors

  # int8 a = 5
  vA := 0 # var index
  vB := 5 # var value
  store-int8

  # int16 b = 370
  vA := 1
  vB := 1
  vC := 0x72
  store-int16

  # int8 c = a
  vA := 0
  load-int8
  vA := 3
  store-int8

  # int8 d = a + c
  vA := 0
  vB := 3
  add-int8
  vA := 4
  store-int8

  # int16 e = 482
  vA := 5
  vB := 1
  vC := 0xE2
  store-int16

  # int16 f = b + e
  vA := 1
  vB := 5
  add-int16
  vA := 7
  store-int16

  # int8 result = myfunction(15, d)

  # Index 9 and 10 are used to store the old stack pointer, so skip those

  # Create or copy over params
  vA := 11 # Start of stack frame of call
  vB := 15
  store-int8
  vA := 4
  load-int8
  vA := 12
  store-int8

  vA := 9
  push-stack-frame
  myfunction
  pop-stack-frame

  # Store return value
  vA := 9
  store-int8

  loop
  again

# int8 func myfunction(int8 a, int8 b)
: myfunction
  # int8 c = a + b
  vA := 0
  vB := 1
  add-int8
  vA := 2
  store-int8

  # return c
  vA := 2
  load-int8

  # Or: return a + b
  #vA := 0
  #vB := 1
  #add-int8
  return




: add-int8
  get-frame-pointer
  i += vA
  load v0
  v3 := v0
  get-frame-pointer
  i += vB
  load v0
  vB := v0
  vB += v3
  return

: add-int16
  get-frame-pointer
  i += vA
  load v1
  v3 := v0
  v4 := v1
  get-frame-pointer
  i += vB
  load v1
  vC := v4
  vC += v1
  vB := vF
  vB += v3
  vB += v0
  return

: add-int32
  get-frame-pointer
  i += vA
  load v3
  v4 := v0
  v5 := v1
  v6 := v2
  v7 := v3
  get-frame-pointer
  i += vB
  load v3
  vE := v7
  vE += v3
  vD := vF
  vD += v6
  vD += v2
  vC := vF
  vC += v5
  vC += v1
  vB := vF
  vB += v4
  vB += v0
  return

: store-int8
  get-frame-pointer
  i += vA
  v0 := vB
  save v0
  return

: store-int16
  get-frame-pointer
  i += vA
  v0 := vB
  v1 := vC
  save v1
  return

: store-int32
  get-frame-pointer
  i += vA
  v0 := vB
  v1 := vC
  v2 := vD
  v3 := vE
  save v3
  return

: load-int8
  get-frame-pointer
  i += vA
  load v0
  vB := v0
  return

: load-int16
  get-frame-pointer
  i += vA
  load v1
  vB := v0
  vC := v1
  return

: load-int32
  get-frame-pointer
  i += vA
  load v3
  vB := v0
  vC := v1
  vD := v2
  vE := v3
  return

: get-frame-pointer
  i := frame-pointer
  load v1
  v2 := 0xA0
  v0 |= v2
  i := get-frame-pointer-smc
  save v1
: get-frame-pointer-smc
  0 0
  return

: push-stack-frame
  i := frame-pointer
  load v1
  v3 := v0
  v4 := v1
  get-frame-pointer
  i += vA
  v0 := v3
  v1 := v4
  save v1
  i := frame-pointer
  vA += 2
  v1 += vA
  v0 += vF
  save v1
  return

: pop-stack-frame
  i := frame-pointer
  load v1
  v1 -= 2
  v0 -= vF
  v2 := 0xA0
  v0 |= v2
  i := pop-stack-frame-smc
  save v1
: pop-stack-frame-smc
  0 0
  load v1
  i := frame-pointer
  save v1
  return

: frame-pointer
  stack-pointer

: stack
  # Stack grows into here

:org 0x0800

: set-monitors

  :monitor frame-pointer 2
  :monitor stack 50
  return
