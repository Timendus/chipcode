:if SCHIP # Don't trip over comments!
  :const USE_SCROLL 1   # Don't trip over comments!
  :const AUTO-INCREMENT 0
:else # Don't trip over comments!
  :const USE_SCROLL 0
  :const AUTO-INCREMENT 1   # Don't trip over comments!
:end # Don't trip over comments!

:if SCHIP
  :dump-options # Don't trip over comments!
:end

: main
  i := pointer
  load v2
  # Manipulate v0 - v2 here, or whatever

  # The value of i now depends on the interpreter running the binary. On Super
  # CHIP it still points to `pointer`, whereas in most other interpreters it
  # will point to `pointer` plus three. Let's fix that with a conditional:
  :unless AUTO-INCREMENT
    vF := 3
    i += vF
  :end
  save v2

  :if SCHIP
    # Do something here
  :end

  # ...

# When writing programs for XO-CHIP, you want your data to end up at the end of
# memory and your code at the beginning. Because only the first 3.5K of memory
# is executable. But we don't always want our source files to be structured in
# that way. Using Octopus, we can mark a section as data, and it will
# automatically be moved down:

:segment data
: table
  0x00 0x01
  0x02 0x03
:segment code

# If your project grows, you don't want to keep everything in a single file
# anymore. Octopus allows you to recursively include files:

:include "included.8o"

# Maybe, depending on some variable, you want to load a different version of a
# file. That's possible too:

:if SCHIP
  :include "included-schip.8o" # Don't trip over comments!
:else
  :include "included-vip.8o"
:end

# We can also include a binary file as-is:

: chip8-logo-rom
  :include "chip8-logo.ch8"

# Including files that don't exist gives us useful errors:

# :include "nonexistent.8o"
# :include "nonexistent.bin"

# # Including an image without the image-loader present gives a useful error:

# :include "mypicture.png"

# Image here:
:include "version.png" 8x4

# Second image:
:include "splash.png"

# Color image:
:include "colors2.png" [414141, 197eb3, e59823, ffffff]
:include "colors.jpg" [414141, 197eb3, e59823, ffffff] 16x16 dither
